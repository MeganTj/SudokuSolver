#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=\n\ Constructs\ a\ new\ Board\ with\ the\ given\ dimensions.\n
comment1.params=
comment1.target=void\ sectionsInIt()
comment1.text=\n\ Initialize\ all\ sections\ (row,\ columns,\ and\ regions)\ so\ each\n\ type\ of\ section\ is\ initialized\ with\ consecutive\ integer\ values\ \n\ beginning\ with\ 0.\n\ \ \n
comment10.params=
comment10.target=java.lang.String\ findNextSquare()
comment10.text=\n\ Returns\ coordinates\ of\ the\ next\ empty\ Square.\n\ \n\ @return\ the\ coordinates\ of\ an\ empty\ Square;\ if\ there\ are\ no\ \n\ \ \ \ \ \ \ \ \ empty\ Squares,\ return\ null\n
comment11.params=
comment11.target=void\ printCurrent()
comment11.text=\n\ Prints\ the\ current\ board.\n
comment12.params=
comment12.target=boolean\ moveOn()
comment12.text=\n\ Determines\ when\ the\ solver\ should\ move\ on\ to\ use\ the\ process\n\ pairs\ method,\ and\ this\ occurs\ when\ all\ of\ the\ unfilled\ squares\n\ have\ 2\ or\ more\ possible\ values\ after\ all\ the\ possible\ values\ have\n\ been\ eliminated\ based\ on\ the\ filled\ squares\n\ \n\ @return\ true\ if\ the\ solver\ should\ move\ on\ to\ use\ process\ pairs;\n\ \ \ \ \ \ \ \ \ otherwise,\ false\n
comment13.params=
comment13.target=boolean\ hasFinished()
comment13.text=\n\ Determines\ whether\ the\ puzzle\ is\ completely\ solved\n\ \n\ @return\ true\ if\ the\ puzzle\ is\ completely\ solved;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\n\ Solves\ a\ sudoku\ puzzle.\n\ \n\ @param\ args\ \ user's\ information\ from\ the\ command\ line\n
comment2.params=
comment2.target=void\ initialCondition()
comment2.text=\n\ Fills\ up\ the\ board\ and\ removes\ possible\ values\ based\ on\ the\ the\ initial\n\ puzzle.\n
comment3.params=r\ c\ v
comment3.target=void\ updateSections(int,\ int,\ int)
comment3.text=\n\ Updates\ all\ the\ sections\ a\ square\ is\ in\ when\ a\ square's\ value\ has\n\ been\ determined.\n\ \n\ @param\ r\ the\ row\ the\ Square\ is\ in\n\ @param\ c\ the\ column\ the\ Square\ s\ in\n\ @param\ v\ the\ Square's\ new\ value\n
comment4.params=s
comment4.target=int\ checkForUniqueValue(Square)
comment4.text=\n\ Returns\ the\ value\ that\ is\ unique\ to\ a\ square\ compared\ to\ the\ other\ \n\ squares\ in\ any\ of\ its\ sections\n\ \n\ @param\ s\ the\ Square\ whose\ possible\ values\ are\ checked\n\ @return\ the\ square's\ unique\ possible\ value\ if\ it\ has\ one;\ otherwise,\n\ \ \ \ \ \ \ \ \ return\ -1\n
comment5.params=
comment5.target=boolean\ processPairs()
comment5.text=\n\ Uses\ the\ process\ pairs\ method\ to\ update\ the\ possible\ values\n\ of\ the\ squares\ in\ the\ sections\ \n\ \n\ @return\ whether\ this\ method\ made\ progress\ in\ solving\ the\n\ \ \ \ \ \ \ \ \ puzzle\ by\ removing\ any\ possible\ value\n
comment6.params=
comment6.target=void\ updateForUniqueValues()
comment6.text=\n\ Runs\ through\ the\ 2-D\ array\ of\ squares\ and\ sets\ the\ value\ for\ any\ square\n\ that\ has\ a\ unique\ possible\ value.\n
comment7.params=
comment7.target=void\ solvePuzzle()
comment7.text=\n\ Solves\ the\ sudoku\ puzzle\ through\ eliminating\ possible\ values\ and\n\ the\ process\ pairs\ method\n
comment8.params=coordinates
comment8.target=boolean\ backTrack(java.lang.String)
comment8.text=\n\ Completes\ in\ the\ remaining\ puzzle\ by\ guessing\ the\ values\ of\ the\ empty\n\ squares.\ If\ the\ guesses\ are\ wrong,\ the\ program\ will\ backtrack\ and\ guess\n\ different\ values.\n\ \n\ @param\ coordinates\ the\ coordinates\ of\ an\ empty\ square\n\ @return\ true\ the\ guessed\ values\ are\ the\ correct\ ones;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\ (backtrack\ to\ previous\ empty\ square)\n\ \n
comment9.params=v\ s
comment9.target=boolean\ isSafe(int,\ Square)
comment9.text=\n\ Return\ whether\ a\ value\ is\ a\ possible\ value\ for\ a\ Square,\ given\ the\ \n\ current\ filled\ in\ Squares\ on\ the\ board.\n\ \n\ @param\ v\ a\ value\ from\ 1\ to\ 9\n\ @param\ s\ a\ Square\ on\ the\ Sudoku\ board\n\ @return\ true\ if\ v\ is\ a\ possible\ value\ for\ s;\ otherwise,\ false\n
numComments=15
